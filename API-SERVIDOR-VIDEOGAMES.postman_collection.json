{
	"info": {
		"_postman_id": "669cc48b-3551-427d-8538-c0bb3e96909f",
		"name": "API-SERVIDOR-VIDEOGAMES",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32189034"
	},
	"item": [
		{
			"name": "Autenticación",
			"item": [
				{
					"name": "Registrar usuario",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nombre\": \"Felipe\",\n  \"apellidos\": \"Que empape\",\n  \"email\": \"felipe@example.com\",\n  \"password\": \"password123\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/auth/signup",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Iniciar sesión con usuario Registrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - token\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.token).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"adri@gmail.com\",\n  \"password\": \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/v1/auth/signin",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"auth",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cerrar sesión",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/v1/auth/logout",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "Métodos del controlador de autenticación (registrar usuario, iniciar sesion con usuarios registrados, crear sesión de usuario)"
		},
		{
			"name": "Usuarios",
			"item": [
				{
					"name": "Mostrar todos los usuarios (rol admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - nombre and email\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user.nombre).to.exist.and.to.be.a('string');",
									"        pm.expect(user.email).to.exist.and.to.be.a('string');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  ",
									"  responseData.forEach(function(user) {",
									"    pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"The response should be in JSON format\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJST0xFX0FETUlOIl0sInN1YiI6ImFkcmlAZ21haWwuY29tIiwiaWF0IjoxNzA5NjU4NzQ3LCJleHAiOjE3MDk2OTQ3NDd9.8p-rm0IbmXnOdPEq04DHRxayU__lGTEpRa4ZUVToOjs",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/v1/usuario",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"usuario"
							]
						},
						"description": "Obtener todos los usuarios de la base de datos usando un token de un usuario con rol de administrador después de iniciar sesión con el con el método singin."
					},
					"response": []
				},
				{
					"name": "Mostrar usuario por id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - nombre and email\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.nombre).to.exist.and.to.be.a('string', \"nombre should be a string\");",
									"  pm.expect(responseData.email).to.exist.and.to.be.a('string', \"email should be a string\");",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid email format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the description of the request is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.descripcion).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJST0xFX0FETUlOIl0sInN1YiI6ImFkcmlAZ21haWwuY29tIiwiaWF0IjoxNzA5NjU4NzQ3LCJleHAiOjE3MDk2OTQ3NDd9.8p-rm0IbmXnOdPEq04DHRxayU__lGTEpRa4ZUVToOjs",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/v1/usuario/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"usuario",
								"1"
							]
						},
						"description": "Obtener un usuario de la base de datos por su id usando un token de un usuario con rol de administrador después de iniciar sesión con el con el método singin."
					},
					"response": []
				},
				{
					"name": "Crear usuario",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJST0xFX0FETUlOIl0sInN1YiI6ImFkcmlAZ21haWwuY29tIiwiaWF0IjoxNzA5NjUzNjU0LCJleHAiOjE3MDk2ODk2NTR9.BZ50O0PUFftXgoqC5F_8wjAxAakHjCsFyn9mRSui-bs",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nombre\": \"Hola\",\n  \"apellidos\": \"hola\",\n  \"email\": \"hola@example.com\",\n  \"password\": \"123\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/v1/usuario",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"usuario"
							]
						}
					},
					"response": []
				}
			],
			"description": "Métodos del controlador de usuarios (mostrar usuarios, mostrar usuarios por su id, crear un usuario)"
		},
		{
			"name": "Comentarios",
			"item": [
				{
					"name": "Mostrar todos los comentarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  ",
									"  responseData.forEach(function(comment) {",
									"    pm.expect(comment).to.have.property('id');",
									"    pm.expect(comment).to.have.property('text');",
									"    pm.expect(comment).to.have.property('usuario');",
									"    pm.expect(comment).to.have.property('videojuegos');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Validate the videojuegos object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(comment) {",
									"        pm.expect(comment.videojuegos).to.exist.and.to.be.an('object');",
									"        pm.expect(comment.videojuegos.id).to.exist.and.to.be.a('number');",
									"        pm.expect(comment.videojuegos.nombre).to.exist.and.to.be.a('string');",
									"        pm.expect(comment.videojuegos.genero).to.exist.and.to.be.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJST0xFX0FETUlOIl0sInN1YiI6ImFkcmlAZ21haWwuY29tIiwiaWF0IjoxNzA5NjU4NzQ3LCJleHAiOjE3MDk2OTQ3NDd9.8p-rm0IbmXnOdPEq04DHRxayU__lGTEpRa4ZUVToOjs",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/v1/comentarios",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"comentarios"
							]
						},
						"description": "Método para obtener todos los comentarios con el token de un usuario registrado (administrador o usuario)"
					},
					"response": []
				},
				{
					"name": "Mostrar comentario por su id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.id).to.be.at.least(0, \"Value should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"The 'text' field should be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Validate email format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.usuario).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.usuario.email).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.usuario.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJST0xFX0FETUlOIl0sInN1YiI6ImFkcmlAZ21haWwuY29tIiwiaWF0IjoxNzA5NjU4NzQ3LCJleHAiOjE3MDk2OTQ3NDd9.8p-rm0IbmXnOdPEq04DHRxayU__lGTEpRa4ZUVToOjs",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/v1/comentarios/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"comentarios",
								"1"
							]
						},
						"description": "Método para obtener un comentario por su id con el token de un usuario registrado (administrador o usuario). Devuelve un 404 not found si aún no hay comentarios."
					},
					"response": []
				},
				{
					"name": "Añadir comentario",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJST0xFX0FETUlOIl0sInN1YiI6ImFkcmlAZ21haWwuY29tIiwiaWF0IjoxNzA5NjU4NzQ3LCJleHAiOjE3MDk2OTQ3NDd9.8p-rm0IbmXnOdPEq04DHRxayU__lGTEpRa4ZUVToOjs",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"id\": \"3\",\n        \"text\": \"Este juego no me gusta\",\n        \"user\": \"felipe@example.com\",\n        \"game\": \"Call of Duty\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/v1/comentarios",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"comentarios"
							]
						},
						"description": "Método para crear un nuevo comentario con el token obtenido al iniciar sesión con un usuario previamente registrado. Si todo va bien, se crea el comentario y devuelve un 201 Created."
					},
					"response": []
				},
				{
					"name": "Eliminar un comentario por su id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJST0xFX0FETUlOIl0sInN1YiI6ImFkcmlAZ21haWwuY29tIiwiaWF0IjoxNzA5NjU4NzQ3LCJleHAiOjE3MDk2OTQ3NDd9.8p-rm0IbmXnOdPEq04DHRxayU__lGTEpRa4ZUVToOjs",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/v1/comentarios/2",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"comentarios",
								"2"
							]
						},
						"description": "Método para eliminar un comentario por su id con el token de un usuario registrado. Si se elimina correctamente devuelve un 204 No Content."
					},
					"response": []
				}
			],
			"description": "Métodos del controlador de comentarios (mostrar comentarios, mostrar comentarios por su id, crear un comentario, eliminar un comentario)"
		},
		{
			"name": "Videojuegos",
			"item": [
				{
					"name": "Mostrar todos los videojuegos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(videojuego){",
									"        pm.expect(videojuego).to.have.property(\"id\");",
									"        pm.expect(videojuego).to.have.property(\"nombre\");",
									"        pm.expect(videojuego).to.have.property(\"genero\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function (videojuego) {",
									"        pm.expect(videojuego.id).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Nombre is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"  ",
									"  responseData.forEach(function(videojuego) {",
									"    pm.expect(videojuego.nombre).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nombre should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Genero is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  ",
									"  responseData.forEach(function(videojuego) {",
									"    pm.expect(videojuego.genero).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Genero should not be empty\");",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJST0xFX0FETUlOIl0sInN1YiI6ImFkcmlAZ21haWwuY29tIiwiaWF0IjoxNzA5NjU4NzQ3LCJleHAiOjE3MDk2OTQ3NDd9.8p-rm0IbmXnOdPEq04DHRxayU__lGTEpRa4ZUVToOjs",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/v1/videojuegos",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"videojuegos"
							]
						},
						"description": "Método para mostrar todos los videojuegos con el token de un usuario registrado"
					},
					"response": []
				},
				{
					"name": "Mostrar videojuegos por su id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.nombre).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.genero).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0, \"Id should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Nombre is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.nombre).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Genero is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.genero).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJST0xFX0FETUlOIl0sInN1YiI6ImFkcmlAZ21haWwuY29tIiwiaWF0IjoxNzA5NjU4NzQ3LCJleHAiOjE3MDk2OTQ3NDd9.8p-rm0IbmXnOdPEq04DHRxayU__lGTEpRa4ZUVToOjs",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/v1/videojuegos/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"videojuegos",
								"1"
							]
						},
						"description": "Método para obtener un videojuego por su id con el token de un usuario registrado."
					},
					"response": []
				},
				{
					"name": "Crear un nuevo videojuego",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.not.be.null;",
									"    pm.expect(responseData.nombre).to.exist.and.to.not.be.null;",
									"    pm.expect(responseData.genero).to.exist.and.to.not.be.null;",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Nombre is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.nombre).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.nombre).to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Genero is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.genero).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJST0xFX0FETUlOIl0sInN1YiI6ImFkcmlAZ21haWwuY29tIiwiaWF0IjoxNzA5NjU5OTEzLCJleHAiOjE3MDk2OTU5MTN9.0ZZK2K98nYFp4GU9BfJ0a6tWdCczuvgwbnRPiIXo6e0",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"id\": \"4\",\n        \"nombre\": \"Tekken 8\",\n        \"genero\": \"Lucha\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/v1/videojuegos",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"videojuegos"
							]
						},
						"description": "Método para crear un nuevo videojuego con el token obtenido al iniciar sesión con un usuario administrador. Si todo va bien, se crea el videojuego y devuelve un 201 Created."
					},
					"response": []
				},
				{
					"name": "Actualizar un videojuego por su id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJST0xFX0FETUlOIl0sInN1YiI6ImFkcmlAZ21haWwuY29tIiwiaWF0IjoxNzA5NjU5OTEzLCJleHAiOjE3MDk2OTU5MTN9.0ZZK2K98nYFp4GU9BfJ0a6tWdCczuvgwbnRPiIXo6e0",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"Far cry\",\n    \"genero\": \"Acción\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/v1/videojuegos/4",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"videojuegos",
								"4"
							]
						},
						"description": "Método para actualizar un videojuego por su id con el token de un usuario administrador."
					},
					"response": []
				},
				{
					"name": "Eliminar un videojuego por su id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJST0xFX0FETUlOIl0sInN1YiI6ImFkcmlAZ21haWwuY29tIiwiaWF0IjoxNzA5NjU5OTEzLCJleHAiOjE3MDk2OTU5MTN9.0ZZK2K98nYFp4GU9BfJ0a6tWdCczuvgwbnRPiIXo6e0",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/v1/videojuegos/4",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"videojuegos",
								"4"
							]
						},
						"description": "Método para eliminar un Videojuego por su id con el token de un usuario administrador. Si se elimina correctamente devuelve un 204 No Content."
					},
					"response": []
				}
			]
		}
	]
}